"builtin.module"() ({
  "ml_program.global"() {sym_name = "dense/bias", sym_visibility = "private", type = tensor<32xf32>, value = dense<0.000000e+00> : tensor<32xf32>} : () -> ()
  "ml_program.global"() {sym_name = "dense/kernel", sym_visibility = "private", type = tensor<16x32xf32>, value = dense<"0xtensor<16x32xf32>} : () -> ()
  "ml_program.global"() {sym_name = "dense_1/bias", sym_visibility = "private", type = tensor<10xf32>, value = dense<0.000000e+00> : tensor<10xf32>} : () -> ()
  "ml_program.global"() {sym_name = "dense_1/kernel", sym_visibility = "private", type = tensor<32x10xf32>, value = dense<"0xtensor<32x10xf32>} : () -> ()
  "func.func"() ({
  ^bb0(%arg0: !iree_input.buffer_view):
    %0 = "iree_input.cast.buffer_view_to_tensor"(%arg0) : (!iree_input.buffer_view) -> tensor<?x2x16xf32>
    %1 = "func.call"(%0) {callee = @serving_default__ireesm} : (tensor<?x2x16xf32>) -> tensor<?x?x10xf32>
    %2 = "iree_input.cast.tensor_to_buffer_view"(%1) : (tensor<?x?x10xf32>) -> !iree_input.buffer_view
    "func.return"(%2) : (!iree_input.buffer_view) -> ()
  }) {function_type = (!iree_input.buffer_view) -> !iree_input.buffer_view, iree.abi = "{\22a\22:[[\22named\22,\22dense_input\22,[\22ndarray\22,\22f32\22,3,null,2,16]]],\22r\22:[[\22sdict\22,[\22dense_1\22,[\22ndarray\22,\22f32\22,3,null,null,10]]]],\22v\22:1}", sym_name = "serving_default"} : () -> ()
  "func.func"() ({
  ^bb0(%arg0: tensor<?x2x16xf32>):
    %0 = "mhlo.constant"() {value = dense<0.000000e+00> : tensor<f32>} : () -> tensor<f32>
    %1 = "mhlo.constant"() {value = dense<1> : tensor<i32>} : () -> tensor<i32>
    %2 = "mhlo.constant"() {value = dense<10> : tensor<1xi32>} : () -> tensor<1xi32>
    %3 = "mhlo.constant"() {value = dense<[0, 1]> : tensor<2xi32>} : () -> tensor<2xi32>
    %4 = "mhlo.constant"() {value = dense<2> : tensor<1xi32>} : () -> tensor<1xi32>
    %5 = "mhlo.constant"() {value = dense<32> : tensor<1xi32>} : () -> tensor<1xi32>
    %6 = "shape.shape_of"(%arg0) : (tensor<?x2x16xf32>) -> tensor<3xindex>
    %7 = "arith.index_cast"(%6) : (tensor<3xindex>) -> tensor<3xi32>
    %8 = "mhlo.torch_index_select"(%7, %4) {batch_dims = 0 : i64, dim = 0 : i64} : (tensor<3xi32>, tensor<1xi32>) -> tensor<1xi32>
    %9 = "mhlo.reduce"(%8, %1) ({
    ^bb0(%arg1: tensor<i32>, %arg2: tensor<i32>):
      %45 = "mhlo.multiply"(%arg1, %arg2) : (tensor<i32>, tensor<i32>) -> tensor<i32>
      "mhlo.return"(%45) : (tensor<i32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<1xi32>, tensor<i32>) -> tensor<i32>
    %10 = "mhlo.torch_index_select"(%7, %3) {batch_dims = 0 : i64, dim = 0 : i64} : (tensor<3xi32>, tensor<2xi32>) -> tensor<2xi32>
    %11 = "mhlo.reduce"(%10, %1) ({
    ^bb0(%arg1: tensor<i32>, %arg2: tensor<i32>):
      %45 = "mhlo.multiply"(%arg1, %arg2) : (tensor<i32>, tensor<i32>) -> tensor<i32>
      "mhlo.return"(%45) : (tensor<i32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<2xi32>, tensor<i32>) -> tensor<i32>
    %12 = "tensor.expand_shape"(%11) {reassociation = []} : (tensor<i32>) -> tensor<1xi32>
    %13 = "tensor.expand_shape"(%9) {reassociation = []} : (tensor<i32>) -> tensor<1xi32>
    %14 = "mhlo.concatenate"(%12, %13) {dimension = 0 : i64} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>
    %15 = "mhlo.concatenate"(%10, %5) {dimension = 0 : i64} : (tensor<2xi32>, tensor<1xi32>) -> tensor<3xi32>
    %16 = "chlo.dynamic_reshape"(%arg0, %14) : (tensor<?x2x16xf32>, tensor<2xi32>) -> tensor<?x?xf32>
    %17 = "ml_program.global_load"() {global = @"dense_1/bias"} : () -> tensor<10xf32>
    %18 = "ml_program.global_load"() {global = @"dense_1/kernel"} : () -> tensor<32x10xf32>
    %19 = "ml_program.global_load"() {global = @"dense/bias"} : () -> tensor<32xf32>
    %20 = "ml_program.global_load"() {global = @"dense/kernel"} : () -> tensor<16x32xf32>
    %21 = "mhlo.dot"(%16, %20) : (tensor<?x?xf32>, tensor<16x32xf32>) -> tensor<?x32xf32>
    %22 = "chlo.dynamic_reshape"(%21, %15) : (tensor<?x32xf32>, tensor<3xi32>) -> tensor<?x?x?xf32>
    %23 = "shape.shape_of"(%22) : (tensor<?x?x?xf32>) -> tensor<3xindex>
    %24 = "mhlo.dynamic_broadcast_in_dim"(%19, %23) {broadcast_dimensions = dense<2> : tensor<1xi64>} : (tensor<32xf32>, tensor<3xindex>) -> tensor<?x?x?xf32>
    %25 = "mhlo.add"(%22, %24) : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %26 = "tensor.cast"(%25) : (tensor<?x?x?xf32>) -> tensor<?x?x32xf32>
    %27 = "chlo.broadcast_maximum"(%26, %0) {broadcast_dimensions = dense<> : tensor<0xi64>} : (tensor<?x?x32xf32>, tensor<f32>) -> tensor<?x?x32xf32>
    %28 = "shape.shape_of"(%27) : (tensor<?x?x32xf32>) -> tensor<3xindex>
    %29 = "arith.index_cast"(%28) : (tensor<3xindex>) -> tensor<3xi32>
    %30 = "mhlo.torch_index_select"(%29, %3) {batch_dims = 0 : i64, dim = 0 : i64} : (tensor<3xi32>, tensor<2xi32>) -> tensor<2xi32>
    %31 = "mhlo.reduce"(%30, %1) ({
    ^bb0(%arg1: tensor<i32>, %arg2: tensor<i32>):
      %45 = "mhlo.multiply"(%arg1, %arg2) : (tensor<i32>, tensor<i32>) -> tensor<i32>
      "mhlo.return"(%45) : (tensor<i32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<2xi32>, tensor<i32>) -> tensor<i32>
    %32 = "mhlo.concatenate"(%30, %2) {dimension = 0 : i64} : (tensor<2xi32>, tensor<1xi32>) -> tensor<3xi32>
    %33 = "mhlo.torch_index_select"(%29, %4) {batch_dims = 0 : i64, dim = 0 : i64} : (tensor<3xi32>, tensor<1xi32>) -> tensor<1xi32>
    %34 = "mhlo.reduce"(%33, %1) ({
    ^bb0(%arg1: tensor<i32>, %arg2: tensor<i32>):
      %45 = "mhlo.multiply"(%arg1, %arg2) : (tensor<i32>, tensor<i32>) -> tensor<i32>
      "mhlo.return"(%45) : (tensor<i32>) -> ()
    }) {dimensions = dense<0> : tensor<1xi64>} : (tensor<1xi32>, tensor<i32>) -> tensor<i32>
    %35 = "tensor.expand_shape"(%31) {reassociation = []} : (tensor<i32>) -> tensor<1xi32>
    %36 = "tensor.expand_shape"(%34) {reassociation = []} : (tensor<i32>) -> tensor<1xi32>
    %37 = "mhlo.concatenate"(%35, %36) {dimension = 0 : i64} : (tensor<1xi32>, tensor<1xi32>) -> tensor<2xi32>
    %38 = "chlo.dynamic_reshape"(%27, %37) : (tensor<?x?x32xf32>, tensor<2xi32>) -> tensor<?x?xf32>
    %39 = "mhlo.dot"(%38, %18) : (tensor<?x?xf32>, tensor<32x10xf32>) -> tensor<?x10xf32>
    %40 = "chlo.dynamic_reshape"(%39, %32) : (tensor<?x10xf32>, tensor<3xi32>) -> tensor<?x?x?xf32>
    %41 = "shape.shape_of"(%40) : (tensor<?x?x?xf32>) -> tensor<3xindex>
    %42 = "mhlo.dynamic_broadcast_in_dim"(%17, %41) {broadcast_dimensions = dense<2> : tensor<1xi64>} : (tensor<10xf32>, tensor<3xindex>) -> tensor<?x?x?xf32>
    %43 = "mhlo.add"(%40, %42) : (tensor<?x?x?xf32>, tensor<?x?x?xf32>) -> tensor<?x?x?xf32>
    %44 = "tensor.cast"(%43) : (tensor<?x?x?xf32>) -> tensor<?x?x10xf32>
    "func.return"(%44) : (tensor<?x?x10xf32>) -> ()
  }) {function_type = (tensor<?x2x16xf32>) -> tensor<?x?x10xf32>, sym_name = "serving_default__ireesm", sym_visibility = "private", tf.entry_function = {control_outputs = "", inputs = "serving_default_dense_input:0", outputs = "StatefulPartitionedCall:0"}} : () -> ()
}) : () -> ()

